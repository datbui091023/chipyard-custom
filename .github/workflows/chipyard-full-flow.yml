name: chipyard-ci-full-flow

on:
  # run ci on pull requests targeting following branches (runs on the merge commit)
  pull_request:
    branches:
      - main
      - '1.[0-9]*.x'

defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  REMOTE_WORK_DIR: ${{ secrets.BUILDDIR }}/cy-ci-shared/cy-${{ github.sha }}
  JAVA_TMP_DIR: /tmp/cy-${{ github.sha }}-full

jobs:
  cancel-prior-workflows:
    name: cancel-prior-workflows
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  # Set up a set of boolean conditions to control which branches of the CI
  # workflow will execute This is based off the conditional job execution
  # example here: https://github.com/dorny/paths-filter#examples
  change-filters:
    name: filter-jobs-on-changes
    runs-on: ubuntu-latest
    # Queried by downstream jobs to determine if they should run.
    outputs:
      needs-rtl: ${{ steps.filter.outputs.all_count != steps.filter.outputs.skip-rtl_count }}

    steps:
      - uses: actions/checkout@v3
      - name: Git workaround
        uses: ./.github/actions/git-workaround
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all:
              - '**'

            # If any of the files changed match, do a doc build
            docs: &docs-filter
              - 'docs/**'
              - '.readthedocs.yml'

            # If all files match to this filter, skip the main ci pipeline
            skip-rtl:
              - *docs-filter
              - '**/*.md'
              - '**/.gitignore'
              - '.github/ISSUE_TEMPLATE/**'

  setup-repo:
    name: setup-repo
    needs: [change-filters, cancel-prior-workflows]
    if: needs.change-filters.outputs.needs-rtl == 'true'
    runs-on: ferry
    steps:
      - name: Delete old checkout
        run: |
            ls -alh .
            rm -rf ${{ github.workspace }}/* || true
            rm -rf ${{ github.workspace }}/.* || true
            ls -alh .
      - uses: actions/checkout@v3
      - name: Setup repo copy
        run: |
          git clone $GITHUB_WORKSPACE ${{ env.REMOTE_WORK_DIR }}
      - name: Setup repo
        run: |
          cd ${{ env.REMOTE_WORK_DIR }}
          eval "$(conda shell.bash hook)"
          mkdir ${{ env.JAVA_TMP_DIR }}
          export MAKEFLAGS="-j32"
          ./build-setup.sh -f

  run-cfg-finder:
    name: run-cfg-finder
    needs: [setup-repo]
    runs-on: ferry
    steps:
      - name: Run config finder
        run: |
          cd ${{ env.REMOTE_WORK_DIR }}
          eval "$(conda shell.bash hook)"
          source env.sh
          cd sims/verilator
          make find-config-fragments

  run-tutorial:
    name: run-tutorial
    needs: [setup-repo]
    runs-on: ferry
    steps:
      - name: Run smoke test
        run: |
          cd ${{ env.REMOTE_WORK_DIR }}
          eval "$(conda shell.bash hook)"
          source env.sh
          cd sims/verilator
          make verilog
      - name: VLSI test
        run: |
          cd ${{ env.REMOTE_WORK_DIR }}
          eval "$(conda shell.bash hook)"

          # set up all eda tools
          cd vlsi
          conda create -y --prefix ./osflow python=3.7
          conda activate ./osflow
          conda install -y -c litex-hub open_pdks.sky130a
          conda install -y -c litex-hub yosys
          conda install -y -c litex-hub openroad
          conda install -y -c litex-hub klayout
          conda install -y -c litex-hub magic
          conda install -y -c litex-hub netgen

          # modify vlsi yaml files
          git clone https://github.com/rahulk29/sram22_sky130_macros.git
          echo "" >> example-sky130.yml
          echo "# tutorial configs" >> example-sky130.yml
          echo "technology.sky130.sky130A: $PWD/osflow/share/pdk/sky130A" >> example-sky130.yml
          echo "technology.sky130.sram22_sky130_macros: $PWD/sram22_sky130_macros" >> example-sky130.yml
          
          echo "" >> example-openroad.yml
          echo "# tutorial configs" >> example-openroad.yml
          echo "synthesis.yosys.yosys_bin: $(which yosys)" >> example-openroad.yml
          echo "par.openroad.openroad_bin: $(which openroad)" >> example-openroad.yml
          echo "par.openroad.klayout_bin: $(which klayout)" >> example-openroad.yml
          echo "drc.magic.magic_bin: $(which klayout)" >> example-openroad.yml
          echo "lvs.netgen.netgen_bin: $(which klayout)" >> example-openroad.yml
          conda deactivate
          
          # normal chipyard setup
          cd ${{ env.REMOTE_WORK_DIR }}
          source env.sh
          
          # vlsi flow
          cd vlsi
          export tutorial=sky130-openroad
          # TODO: consider setting VLSI_TOP=RocketTile
          make buildfile
          make syn
          make par

  cleanup:
    name: cleanup
    needs: [run-tutorial]
    runs-on: ferry
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    steps:
      - name: Delete repo copy and conda env
        run: |
           rm -rf ${{ env.REMOTE_WORK_DIR }}
